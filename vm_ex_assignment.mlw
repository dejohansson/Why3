module Vm_Ex

  use vm.Vm
  use option.Option
  use int.Int
  use list.List
  use list.Length
  use list.Append
  use list.Nth
  use list.NthLength
  use state.State
  use state.Reg
  use bv_op.BV_OP

  exception Err
  exception Halt machine_state
 
  lemma codeseq_at_zero:
    forall c1 c2. length c1 = 0 -> 
      codeseq_at (c1 ++ c2) 0 c2

  let rec split_at p (c:code)   
    raises   { Err ->  p >= length c }

    requires { p >= 0 } (* well founded *)
    variant  { p }      (* termination  *)

    ensures  { 
        let (hd, tl) = result in
        hd ++ tl = c /\
        codeseq_at c p tl /\
        length tl > 0
    }
  = match (c, p = 0) with
    | (Nil, _)       -> raise Err (* p >= length c *)
    | (_, True)      -> (Nil, c)
    | (Cons e c', _) -> 
      let (hd, tl) = split_at (p - 1) c' in
      (Cons e hd, tl)
    end

  let pop (s:stack) : (int, stack)
    ensures {
      let (rv, rs) = result in
      Cons rv rs  = s (* original stack *)
    }
    raises { Err }
  =
    match s with
    | Nil        -> raise Err
    | Cons rv rs -> (rv, rs)
    end

  let instr_ex (c: code) (ms: machine_state): machine_state 
    raises   { Err }
    raises   { Halt (VMS p _ _ _) -> codeseq_at c p ihalt }
    ensures  { transition c ms result } 
  =
    let VMS p r s m = ms in (* split machine state *)
    
    if p < 0 then raise Err;

    try 
      let (_, Cons instr _) = split_at p c in      
      assert { codeseq_at c p (Cons instr Nil)};
    
      match instr with      
      (* new instructions *)
      | Iimm x n ->
          (VMS (p + 1) (write r x n) s m)
      | Iload x n ->
          (VMS (p + 1) (write r x m[n]) s m) 
      | Istore x n -> 
          (VMS (p + 1) r s m[n <- read r x])
      | Ipushr x ->
          (VMS (p + 1) r (push (read r x) s) m)
      | Ipopr x -> 
          let (value, stack) = pop s in
          VMS (p + 1) (write r x value) stack m
      | Iaddr x1 x2 x3 -> 
          VMS (p + 1) (write r x3 (read r x1 + read r x2)) s m
      | Iaddur x1 x2 x3 ->
          VMS (p + 1) (write r x3 (bv_add (read r x1) (read r x2))) s m
      | Isubr x1 x2 x3 ->
          VMS (p + 1) (write r x3 (read r x1 - read r x2)) s m
      | Isubur x1 x2 x3 ->
          VMS (p + 1) (write r x3 (bv_sub (read r x1) (read r x2))) s m
      | Ibeqr x1 x2 ofs -> 
          match (read r x1) = (read r x2) with
          | True -> VMS (p + 1 + ofs) r s m
          | False -> VMS (p + 1) r s m
          end
      | Ibner x1 x2 ofs -> 
          match (read r x1) <> (read r x2) with
          | True -> VMS (p + 1 + ofs) r s m
          | False -> VMS (p + 1) r s m
          end
      | Ibler x1 x2 ofs -> 
          match (read r x1) <= (read r x2) with
          | True -> VMS (p + 1 + ofs) r s m
          | False -> VMS (p + 1) r s m
          end
      | Ibgtr x1 x2 ofs -> 
          match (read r x1) > (read r x2) with
          | True -> VMS (p + 1 + ofs) r s m
          | False -> VMS (p + 1) r s m
          end
      
      
      (* original instructions *)
      | Iconst n    -> (* push n on stack *)
          VMS (p + 1) r (push n s) m 
      | Ivar x ->
          VMS (p + 1) r (push m[x] s) m     
      | Isetvar x -> 
          let (value, stack) = pop s in 
          VMS (p + 1) r stack m[x <- value]
      | Iadd ->
          let (v1, stack1) = pop s in
          let (v2, stack2) = pop stack1 in
          let sum = v2 + v1 in
          VMS (p + 1) r (push sum stack2) m
      | Iaddu ->
          let (v1, stack1) = pop s in
          let (v2, stack2) = pop stack1 in
          let sum = bv_add v2 v1 in
          VMS (p + 1) r (push sum stack2) m
      | Isub ->
          let (v1, stack1) = pop s in
          let (v2, stack2) = pop stack1 in
          let dif = v2 - v1 in
          VMS (p + 1) r (push dif stack2) m
      | Isubu ->
          let (v1, stack1) = pop s in
          let (v2, stack2) = pop stack1 in
          let sum = bv_sub v2 v1 in
          VMS (p + 1) r (push sum stack2) m
      | Ibeq ofs ->
          let (v1, stack1) = pop s in
          let (v2, stack2) = pop stack1 in
          match v2 = v1 with
          | True -> VMS (p + 1 + ofs) r stack2 m
          | False -> VMS (p + 1) r stack2 m
          end
      | Ible ofs ->
          let (v1, stack1) = pop s in
          let (v2, stack2) = pop stack1 in
          match v2 <= v1 with
          | True -> VMS (p + 1 + ofs) r stack2 m
          | False -> VMS (p + 1) r stack2 m
          end
      | Ibne ofs ->
          let (v1, stack1) = pop s in
          let (v2, stack2) = pop stack1 in
          match v2 <> v1 with
          | True -> VMS (p + 1 + ofs) r stack2 m
          | False -> VMS (p + 1) r stack2 m
          end
      | Ibgt ofs ->
          let (v1, stack1) = pop s in
          let (v2, stack2) = pop stack1 in
          match v2 > v1 with
          | True -> VMS (p + 1 + ofs) r stack2 m
          | False -> VMS (p + 1) r stack2 m
          end
      | Ibranch ofs -> 
          VMS (p + 1 + ofs) r s m    
      | Ihalt -> 
          raise (Halt ms)
          
      | _ -> raise Err
      end
    with 
      Err -> raise Err  
    end
          
  let rec instr_iter_ex (c: code) (ms: machine_state): machine_state 
    raises   { Err }
    raises   { Halt (VMS p _ _ _) -> codeseq_at c p ihalt }
    ensures  { transition_star c ms result } 
    diverges
  =
    instr_iter_ex c (instr_ex c ms)   
   
end